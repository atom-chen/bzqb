{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\framework\\lib/assets\\framework\\lib\\MyMd5.ts"],"names":[],"mappings":"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AAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;QACvE,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;QACvE,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QACtE,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAC3E,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,CAAC,SAAS,EAAE,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAE5E,iBAAiB;QACjB,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QACjB,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QACjB,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QACjB,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;KACpB;IACD,wCAAwC;IACxC,OAAO,eAAe,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;AACzD,CAAC;AAlRD,wBAkRC","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\framework\\lib","sourcesContent":["\r\n\r\nexport default function MyMd5(data){\r\n    // for test/debug\r\n    function fflog(msg) {\r\n        try {\r\n            //console.log(msg);\r\n        } catch(e) {}\r\n    }\r\n \r\n    // convert number to (unsigned) 32 bit hex, zero filled string\r\n    function to_zerofilled_hex(n) {\r\n        var t1 = (n >>> 24).toString(16);\r\n        var t2 = (n & 0x00FFFFFF).toString(16);\r\n        return \"00\".substr(0, 2 - t1.length) + t1 +\r\n            \"000000\".substr(0, 6 - t2.length) + t2;\r\n    }\r\n \r\n    // convert array of chars to array of bytes (note: Unicode not supported)\r\n    function chars_to_bytes(ac) {\r\n        var retval = [];\r\n        for (var i = 0; i < ac.length; i++) {\r\n            retval = retval.concat(str_to_bytes(ac[i]));\r\n        }\r\n        return retval;\r\n    }\r\n \r\n \r\n    // convert a 64 bit unsigned number to array of bytes. Little endian\r\n    function int64_to_bytes(num) {\r\n        var retval = [];\r\n        for (var i = 0; i < 8; i++) {\r\n            retval.push(num & 0xFF);\r\n            num = num >>> 8;\r\n        }\r\n        return retval;\r\n    }\r\n \r\n    //  32 bit left-rotation\r\n    function rol(num, places) {\r\n        return ((num << places) & 0xFFFFFFFF) | (num >>> (32 - places));\r\n    }\r\n \r\n    // The 4 MD5 functions\r\n    function fF(b, c, d) {\r\n        return (b & c) | (~b & d);\r\n    }\r\n \r\n    function fG(b, c, d) {\r\n        return (d & b) | (~d & c);\r\n    }\r\n \r\n    function fH(b, c, d) {\r\n        return b ^ c ^ d;\r\n    }\r\n \r\n    function fI(b, c, d) {\r\n        return c ^ (b | ~d);\r\n    }\r\n \r\n    // pick 4 bytes at specified offset. Little-endian is assumed\r\n    function bytes_to_int32(arr, off) {\r\n        return (arr[off + 3] << 24) | (arr[off + 2] << 16) | (arr[off + 1] << 8) | (arr[off]);\r\n    }\r\n \r\n    /*\r\n     Conver string to array of bytes in UTF-8 encoding\r\n     See:\r\n     http://www.dangrossman.info/2007/05/25/handling-utf-8-in-javascript-php-and-non-utf8-databases/\r\n     http://stackoverflow.com/questions/1240408/reading-bytes-from-a-javascript-string\r\n     How about a String.getBytes(<ENCODING>) for Javascript!? Isn't it time to add it?\r\n     */\r\n    function str_to_bytes(str) {\r\n        // alert(\"got \" + str.length + \" chars\")\r\n        var retval = [ ];\r\n        for (var i = 0; i < str.length; i++)\r\n            if (str.charCodeAt(i) <= 0x7F) {\r\n                retval.push(str.charCodeAt(i));\r\n            } else {\r\n                var tmp = encodeURIComponent(str.charAt(i)).substr(1).split('%');\r\n                for (var j = 0; j < tmp.length; j++) {\r\n                    retval.push(parseInt(tmp[j], 0x10));\r\n                }\r\n            }\r\n        return retval;\r\n    };\r\n \r\n \r\n \r\n \r\n    // convert the 4 32-bit buffers to a 128 bit hex string. (Little-endian is assumed)\r\n    function int128le_to_hex(a, b, c, d) {\r\n        var ra = \"\";\r\n        var t = 0;\r\n        var ta = 0;\r\n        for (var i = 3; i >= 0; i--) {\r\n            ta = arguments[i];\r\n            t = (ta & 0xFF);\r\n            ta = ta >>> 8;\r\n            t = t << 8;\r\n            t = t | (ta & 0xFF);\r\n            ta = ta >>> 8;\r\n            t = t << 8;\r\n            t = t | (ta & 0xFF);\r\n            ta = ta >>> 8;\r\n            t = t << 8;\r\n            t = t | ta;\r\n            ra = ra + to_zerofilled_hex(t);\r\n        }\r\n        return ra;\r\n    }\r\n \r\n    // check input data type and perform conversions if needed\r\n    var databytes = null;\r\n    // String\r\n    if (typeof data == 'string') {\r\n        // convert string to array bytes\r\n        databytes = str_to_bytes(data);\r\n    } else if (data.constructor == Array) {\r\n        if (data.length === 0) {\r\n            // if it's empty, just assume array of bytes\r\n            databytes = data;\r\n        } else if (typeof data[0] == 'string') {\r\n            databytes = chars_to_bytes(data);\r\n        } else if (typeof data[0] == 'number') {\r\n            databytes = data;\r\n        } else {\r\n            fflog(\"input data type mismatch\");\r\n            return null;\r\n        }\r\n    } else {\r\n        fflog(\"input data type mismatch\");\r\n        return null;\r\n    }\r\n \r\n    // save original length\r\n    var org_len = databytes.length;\r\n \r\n    // first append the \"1\" + 7x \"0\"\r\n    databytes.push(0x80);\r\n \r\n    // determine required amount of padding\r\n    var tail = databytes.length % 64;\r\n    // no room for msg length?\r\n    if (tail > 56) {\r\n        // pad to next 512 bit block\r\n        for (var i = 0; i < (64 - tail); i++) {\r\n            databytes.push(0x0);\r\n        }\r\n        tail = databytes.length % 64;\r\n    }\r\n    for (i = 0; i < (56 - tail); i++) {\r\n        databytes.push(0x0);\r\n    }\r\n    // message length in bits mod 512 should now be 448\r\n    // append 64 bit, little-endian original msg length (in *bits*!)\r\n    databytes = databytes.concat(int64_to_bytes(org_len * 8));\r\n \r\n    // initialize 4x32 bit state\r\n    var h0 = 0x67452301;\r\n    var h1 = 0xEFCDAB89;\r\n    var h2 = 0x98BADCFE;\r\n    var h3 = 0x10325476;\r\n \r\n    // temp buffers\r\n    var a = 0,\r\n        b = 0,\r\n        c = 0,\r\n        d = 0;\r\n \r\n \r\n    function _add(n1, n2) {\r\n        return 0x0FFFFFFFF & (n1 + n2)\r\n    }\r\n \r\n    // function update partial state for each run\r\n    var updateRun = function(nf, sin32, dw32, b32) {\r\n        var temp = d;\r\n        d = c;\r\n        c = b;\r\n        //b = b + rol(a + (nf + (sin32 + dw32)), b32);\r\n        b = _add(b,\r\n            rol(\r\n                _add(a,\r\n                    _add(nf, _add(sin32, dw32))\r\n                ), b32\r\n            )\r\n        );\r\n        a = temp;\r\n    };\r\n \r\n \r\n    // Digest message\r\n    for (i = 0; i < databytes.length / 64; i++) {\r\n        // initialize run\r\n        a = h0;\r\n        b = h1;\r\n        c = h2;\r\n        d = h3;\r\n \r\n        var ptr = i * 64;\r\n \r\n        // do 64 runs\r\n        updateRun(fF(b, c, d), 0xd76aa478, bytes_to_int32(databytes, ptr), 7);\r\n        updateRun(fF(b, c, d), 0xe8c7b756, bytes_to_int32(databytes, ptr + 4), 12);\r\n        updateRun(fF(b, c, d), 0x242070db, bytes_to_int32(databytes, ptr + 8), 17);\r\n        updateRun(fF(b, c, d), 0xc1bdceee, bytes_to_int32(databytes, ptr + 12), 22);\r\n        updateRun(fF(b, c, d), 0xf57c0faf, bytes_to_int32(databytes, ptr + 16), 7);\r\n        updateRun(fF(b, c, d), 0x4787c62a, bytes_to_int32(databytes, ptr + 20), 12);\r\n        updateRun(fF(b, c, d), 0xa8304613, bytes_to_int32(databytes, ptr + 24), 17);\r\n        updateRun(fF(b, c, d), 0xfd469501, bytes_to_int32(databytes, ptr + 28), 22);\r\n        updateRun(fF(b, c, d), 0x698098d8, bytes_to_int32(databytes, ptr + 32), 7);\r\n        updateRun(fF(b, c, d), 0x8b44f7af, bytes_to_int32(databytes, ptr + 36), 12);\r\n        updateRun(fF(b, c, d), 0xffff5bb1, bytes_to_int32(databytes, ptr + 40), 17);\r\n        updateRun(fF(b, c, d), 0x895cd7be, bytes_to_int32(databytes, ptr + 44), 22);\r\n        updateRun(fF(b, c, d), 0x6b901122, bytes_to_int32(databytes, ptr + 48), 7);\r\n        updateRun(fF(b, c, d), 0xfd987193, bytes_to_int32(databytes, ptr + 52), 12);\r\n        updateRun(fF(b, c, d), 0xa679438e, bytes_to_int32(databytes, ptr + 56), 17);\r\n        updateRun(fF(b, c, d), 0x49b40821, bytes_to_int32(databytes, ptr + 60), 22);\r\n        updateRun(fG(b, c, d), 0xf61e2562, bytes_to_int32(databytes, ptr + 4), 5);\r\n        updateRun(fG(b, c, d), 0xc040b340, bytes_to_int32(databytes, ptr + 24), 9);\r\n        updateRun(fG(b, c, d), 0x265e5a51, bytes_to_int32(databytes, ptr + 44), 14);\r\n        updateRun(fG(b, c, d), 0xe9b6c7aa, bytes_to_int32(databytes, ptr), 20);\r\n        updateRun(fG(b, c, d), 0xd62f105d, bytes_to_int32(databytes, ptr + 20), 5);\r\n        updateRun(fG(b, c, d), 0x2441453, bytes_to_int32(databytes, ptr + 40), 9);\r\n        updateRun(fG(b, c, d), 0xd8a1e681, bytes_to_int32(databytes, ptr + 60), 14);\r\n        updateRun(fG(b, c, d), 0xe7d3fbc8, bytes_to_int32(databytes, ptr + 16), 20);\r\n        updateRun(fG(b, c, d), 0x21e1cde6, bytes_to_int32(databytes, ptr + 36), 5);\r\n        updateRun(fG(b, c, d), 0xc33707d6, bytes_to_int32(databytes, ptr + 56), 9);\r\n        updateRun(fG(b, c, d), 0xf4d50d87, bytes_to_int32(databytes, ptr + 12), 14);\r\n        updateRun(fG(b, c, d), 0x455a14ed, bytes_to_int32(databytes, ptr + 32), 20);\r\n        updateRun(fG(b, c, d), 0xa9e3e905, bytes_to_int32(databytes, ptr + 52), 5);\r\n        updateRun(fG(b, c, d), 0xfcefa3f8, bytes_to_int32(databytes, ptr + 8), 9);\r\n        updateRun(fG(b, c, d), 0x676f02d9, bytes_to_int32(databytes, ptr + 28), 14);\r\n        updateRun(fG(b, c, d), 0x8d2a4c8a, bytes_to_int32(databytes, ptr + 48), 20);\r\n        updateRun(fH(b, c, d), 0xfffa3942, bytes_to_int32(databytes, ptr + 20), 4);\r\n        updateRun(fH(b, c, d), 0x8771f681, bytes_to_int32(databytes, ptr + 32), 11);\r\n        updateRun(fH(b, c, d), 0x6d9d6122, bytes_to_int32(databytes, ptr + 44), 16);\r\n        updateRun(fH(b, c, d), 0xfde5380c, bytes_to_int32(databytes, ptr + 56), 23);\r\n        updateRun(fH(b, c, d), 0xa4beea44, bytes_to_int32(databytes, ptr + 4), 4);\r\n        updateRun(fH(b, c, d), 0x4bdecfa9, bytes_to_int32(databytes, ptr + 16), 11);\r\n        updateRun(fH(b, c, d), 0xf6bb4b60, bytes_to_int32(databytes, ptr + 28), 16);\r\n        updateRun(fH(b, c, d), 0xbebfbc70, bytes_to_int32(databytes, ptr + 40), 23);\r\n        updateRun(fH(b, c, d), 0x289b7ec6, bytes_to_int32(databytes, ptr + 52), 4);\r\n        updateRun(fH(b, c, d), 0xeaa127fa, bytes_to_int32(databytes, ptr), 11);\r\n        updateRun(fH(b, c, d), 0xd4ef3085, bytes_to_int32(databytes, ptr + 12), 16);\r\n        updateRun(fH(b, c, d), 0x4881d05, bytes_to_int32(databytes, ptr + 24), 23);\r\n        updateRun(fH(b, c, d), 0xd9d4d039, bytes_to_int32(databytes, ptr + 36), 4);\r\n        updateRun(fH(b, c, d), 0xe6db99e5, bytes_to_int32(databytes, ptr + 48), 11);\r\n        updateRun(fH(b, c, d), 0x1fa27cf8, bytes_to_int32(databytes, ptr + 60), 16);\r\n        updateRun(fH(b, c, d), 0xc4ac5665, bytes_to_int32(databytes, ptr + 8), 23);\r\n        updateRun(fI(b, c, d), 0xf4292244, bytes_to_int32(databytes, ptr), 6);\r\n        updateRun(fI(b, c, d), 0x432aff97, bytes_to_int32(databytes, ptr + 28), 10);\r\n        updateRun(fI(b, c, d), 0xab9423a7, bytes_to_int32(databytes, ptr + 56), 15);\r\n        updateRun(fI(b, c, d), 0xfc93a039, bytes_to_int32(databytes, ptr + 20), 21);\r\n        updateRun(fI(b, c, d), 0x655b59c3, bytes_to_int32(databytes, ptr + 48), 6);\r\n        updateRun(fI(b, c, d), 0x8f0ccc92, bytes_to_int32(databytes, ptr + 12), 10);\r\n        updateRun(fI(b, c, d), 0xffeff47d, bytes_to_int32(databytes, ptr + 40), 15);\r\n        updateRun(fI(b, c, d), 0x85845dd1, bytes_to_int32(databytes, ptr + 4), 21);\r\n        updateRun(fI(b, c, d), 0x6fa87e4f, bytes_to_int32(databytes, ptr + 32), 6);\r\n        updateRun(fI(b, c, d), 0xfe2ce6e0, bytes_to_int32(databytes, ptr + 60), 10);\r\n        updateRun(fI(b, c, d), 0xa3014314, bytes_to_int32(databytes, ptr + 24), 15);\r\n        updateRun(fI(b, c, d), 0x4e0811a1, bytes_to_int32(databytes, ptr + 52), 21);\r\n        updateRun(fI(b, c, d), 0xf7537e82, bytes_to_int32(databytes, ptr + 16), 6);\r\n        updateRun(fI(b, c, d), 0xbd3af235, bytes_to_int32(databytes, ptr + 44), 10);\r\n        updateRun(fI(b, c, d), 0x2ad7d2bb, bytes_to_int32(databytes, ptr + 8), 15);\r\n        updateRun(fI(b, c, d), 0xeb86d391, bytes_to_int32(databytes, ptr + 36), 21);\r\n \r\n        // update buffers\r\n        h0 = _add(h0, a);\r\n        h1 = _add(h1, b);\r\n        h2 = _add(h2, c);\r\n        h3 = _add(h3, d);\r\n    }\r\n    // Done! Convert buffers to 128 bit (LE)\r\n    return int128le_to_hex(h3, h2, h1, h0).toUpperCase();\r\n}"]}