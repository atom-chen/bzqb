{"version":3,"sources":["..\\..\\..\\..\\..\\..\\..\\..\\assets\\modules\\game\\script\\physics\\hkcollider/assets\\modules\\game\\script\\physics\\hkcollider\\hkIntersection.js"],"names":["Intersection","lineLine","a1","a2","b1","b2","ua_t","x","y","ub_t","u_b","ua","ub","lineRect","b","r0","cc","Vec2","r1","yMax","r2","xMax","r3","linePolygon","length","i","rectRect","a","a_min_x","a_min_y","a_max_x","width","a_max_y","height","b_min_x","b_min_y","b_max_x","b_max_y","rectPolygon","l","pointInPolygon","polygonPolygon","circleCircle","distance","position","sub","mag","radius","polygonCircle","polygon","circle","start","end","pointLineDistance","point","inside","j","xi","yi","xj","yj","intersect","isSegment","dx","dy","d","t","p","v2","Math","sqrt","module","exports"],"mappings":"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","file":"hkIntersection.js","sourceRoot":"..\\..\\..\\..\\..\\..\\..\\..\\assets\\modules\\game\\script\\physics\\hkcollider","sourcesContent":["\n/**\n * !#en Intersection helper class\n * !#zh 辅助类，用于测试形状与形状是否相交\n * @class Intersection\n * @static\n */\nvar Intersection = {};\n\n/**\n * !#en Test line and line\n * !#zh 测试线段与线段是否相交\n * @method lineLine\n * @param {Vec2} a1 - The start point of the first line\n * @param {Vec2} a2 - The end point of the first line\n * @param {Vec2} b1 - The start point of the second line\n * @param {Vec2} b2 - The end point of the second line\n * @return {boolean}\n */\nfunction lineLine ( a1, a2, b1, b2 ) {\n    // jshint camelcase:false\n\n    var ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);\n    var ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);\n    var u_b  = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n\n    if ( u_b !== 0 ) {\n        var ua = ua_t / u_b;\n        var ub = ub_t / u_b;\n\n        if ( 0 <= ua && ua <= 1 && 0 <= ub && ub <= 1 ) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nIntersection.lineLine = lineLine;\n\n/**\n * !#en Test line and rect\n * !#zh 测试线段与矩形是否相交\n * @method lineRect\n * @param {Vec2} a1 - The start point of the line\n * @param {Vec2} a2 - The end point of the line\n * @param {Rect} b - The rect\n * @return {boolean}\n */\nfunction lineRect ( a1, a2, b ) {\n    var r0 = new cc.Vec2( b.x, b.y );\n    var r1 = new cc.Vec2( b.x, b.yMax );\n    var r2 = new cc.Vec2( b.xMax, b.yMax );\n    var r3 = new cc.Vec2( b.xMax, b.y );\n\n    if ( lineLine( a1, a2, r0, r1 ) )\n        return true;\n\n    if ( lineLine( a1, a2, r1, r2 ) )\n        return true;\n\n    if ( lineLine( a1, a2, r2, r3 ) )\n        return true;\n\n    if ( lineLine( a1, a2, r3, r0 ) )\n        return true;\n\n    return false;\n}\n\nIntersection.lineRect = lineRect;\n\n/**\n * !#en Test line and polygon\n * !#zh 测试线段与多边形是否相交\n * @method linePolygon\n * @param {Vec2} a1 - The start point of the line\n * @param {Vec2} a2 - The end point of the line\n * @param {Vec2[]} b - The polygon, a set of points\n * @return {boolean}\n */\nfunction linePolygon ( a1, a2, b ) {\n    var length = b.length;\n\n    for ( var i = 0; i < length; ++i ) {\n        var b1 = b[i];\n        var b2 = b[(i+1)%length];\n\n        if ( lineLine( a1, a2, b1, b2 ) )\n            return true;\n    }\n\n    return false;\n}\n\nIntersection.linePolygon = linePolygon;\n\n/**\n * !#en Test rect and rect\n * !#zh 测试矩形与矩形是否相交\n * @method rectRect\n * @param {Rect} a - The first rect\n * @param {Rect} b - The second rect\n * @return {boolean}\n */\nfunction rectRect ( a, b ) {\n    // jshint camelcase:false\n\n    var a_min_x = a.x;\n    var a_min_y = a.y;\n    var a_max_x = a.x + a.width;\n    var a_max_y = a.y + a.height;\n\n    var b_min_x = b.x;\n    var b_min_y = b.y;\n    var b_max_x = b.x + b.width;\n    var b_max_y = b.y + b.height;\n\n    return a_min_x <= b_max_x &&\n           a_max_x >= b_min_x &&\n           a_min_y <= b_max_y &&\n           a_max_y >= b_min_y\n           ;\n}\n\nIntersection.rectRect = rectRect;\n\n/**\n * !#en Test rect and polygon\n * !#zh 测试矩形与多边形是否相交\n * @method rectPolygon\n * @param {Rect} a - The rect\n * @param {Vec2[]} b - The polygon, a set of points\n * @return {boolean}\n */\nfunction rectPolygon ( a, b ) {\n    var i, l;\n    var r0 = new cc.Vec2( a.x, a.y );\n    var r1 = new cc.Vec2( a.x, a.yMax );\n    var r2 = new cc.Vec2( a.xMax, a.yMax );\n    var r3 = new cc.Vec2( a.xMax, a.y );\n\n    // intersection check\n    if ( linePolygon( r0, r1, b ) )\n        return true;\n\n    if ( linePolygon( r1, r2, b ) )\n        return true;\n\n    if ( linePolygon( r2, r3, b ) )\n        return true;\n\n    if ( linePolygon( r3, r0, b ) )\n        return true;\n\n    // check if a contains b\n    for ( i = 0, l = b.length; i < l; ++i ) {\n        if ( pointInPolygon(b[i], a) )\n            return true;\n    }\n\n    // check if b contains a\n    if ( pointInPolygon(r0, b) )\n        return true;\n\n    if ( pointInPolygon(r1, b) )\n        return true;\n\n    if ( pointInPolygon(r2, b) )\n        return true;\n\n    if ( pointInPolygon(r3, b) )\n        return true;\n\n    return false;\n}\n\nIntersection.rectPolygon = rectPolygon;\n\n/**\n * !#en Test polygon and polygon\n * !#zh 测试多边形与多边形是否相交\n * @method polygonPolygon\n * @param {Vec2[]} a - The first polygon, a set of points\n * @param {Vec2[]} b - The second polygon, a set of points\n * @return {boolean}\n */\nfunction polygonPolygon ( a, b ) {\n    var i, l;\n\n    // check if a intersects b\n    for ( i = 0, l = a.length; i < l; ++i ) {\n        var a1 = a[i];\n        var a2 = a[(i+1)%l];\n\n        if ( linePolygon( a1, a2, b ) )\n            return true;\n    }\n\n    // check if a contains b\n    for ( i = 0, l = b.length; i < l; ++i ) {\n        if ( pointInPolygon(b[i], a) )\n            return true;\n    }\n\n    // check if b contains a\n    for ( i = 0, l = a.length; i < l; ++i ) {\n        if ( pointInPolygon( a[i], b ) )\n            return true;\n    }\n\n    return false;\n}\n\nIntersection.polygonPolygon = polygonPolygon;\n\n\n\n/**\n * !#en Test circle and circle\n * !#zh 测试圆形与圆形是否相交\n * @method circleCircle\n * @param {Object} a - Object contains position and radius\n * @param {Object} b - Object contains position and radius\n * @return {boolean}\n * @typescript circleCircle(a: {position: Vec2, radius: number}, b: {position: Vec2, radius: number}): boolean\n */\nfunction circleCircle (a, b) {\n    var distance = a.position.sub(b.position).mag();\n    return distance < (a.radius + b.radius);\n}\n\nIntersection.circleCircle = circleCircle;\n\n\n/**\n * !#en Test polygon and circle\n * !#zh 测试矩形与圆形是否相交\n * @method polygonCircle\n * @param {Vec2[]} polygon - The Polygon, a set of points\n * @param {Object} circle - Object contains position and radius\n * @return {boolean}\n * @typescript polygonCircle(polygon: Vec2[], circle: {position: Vec2, radius: number}): boolean\n */\nfunction polygonCircle (polygon, circle) {\n    var position = circle.position;\n    if (pointInPolygon(position, polygon)) {\n        return true;\n    }\n\n    for (var i = 0, l = polygon.length; i < l; i++) {\n        var start = i === 0 ? polygon[polygon.length - 1] : polygon[i- 1];\n        var end = polygon[i];\n\n        if (pointLineDistance(position, start, end, true) < circle.radius) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nIntersection.polygonCircle = polygonCircle;\n\n/**\n * !#en Test whether the point is in the polygon\n * !#zh 测试一个点是否在一个多边形中\n * @method pointInPolygon\n * @param {Vec2} point - The point\n * @param {Vec2[]} polygon - The polygon, a set of points\n * @return {boolean}\n */\nfunction pointInPolygon (point, polygon) {\n    var inside = false;\n    var x = point.x;\n    var y = point.y;\n\n    // use some raycasting to test hits\n    // https://github.com/substack/point-in-polygon/blob/master/index.js\n    var length = polygon.length;\n\n    for ( var i = 0, j = length-1; i < length; j = i++ ) {\n        var xi = polygon[i].x, yi = polygon[i].y,\n            xj = polygon[j].x, yj = polygon[j].y,\n            intersect = ((yi > y) !== (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n\n        if ( intersect ) inside = !inside;\n    }\n\n    return inside;\n}\n\nIntersection.pointInPolygon = pointInPolygon;\n\n/**\n * !#en Calculate the distance of point to line.\n * !#zh 计算点到直线的距离。如果这是一条线段并且垂足不在线段内，则会计算点到线段端点的距离。\n * @method pointLineDistance\n * @param {Vec2} point - The point\n * @param {Vec2} start - The start point of line\n * @param {Vec2} end - The end point of line\n * @param {boolean} isSegment - whether this line is a segment\n * @return {boolean}\n */\nfunction pointLineDistance(point, start, end, isSegment) {\n    var dx = end.x - start.x;\n    var dy = end.y - start.y;\n    var d = dx*dx + dy*dy;\n    var t = ((point.x - start.x) * dx + (point.y - start.y) * dy) / d;\n    var p;\n\n    if (!isSegment) {\n        p = cc.v2(start.x + t * dx, start.y + t * dy);\n    }\n    else {\n        if (d) {\n            if (t < 0) p = start;\n            else if (t > 1) p = end;\n            else p = cc.v2(start.x + t * dx, start.y + t * dy);\n        }\n        else {\n            p = start;\n        }\n    }\n        \n    dx = point.x - p.x;\n    dy = point.y - p.y;\n    return Math.sqrt(dx*dx + dy*dy);\n}\n\nIntersection.pointLineDistance = pointLineDistance;\n\n// cc.hkIntersection = \nmodule.exports = Intersection;\n"]}