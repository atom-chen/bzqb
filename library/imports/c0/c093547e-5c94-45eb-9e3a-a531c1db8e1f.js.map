{"version":3,"sources":["..\\..\\..\\..\\..\\..\\assets\\framework\\lib\\jszip/assets\\framework\\lib\\jszip\\stringReader.js"],"names":["DataReader","require","utils","StringReader","data","optimizedBinaryString","string2binary","length","index","prototype","byteAt","i","charCodeAt","lastIndexOfSignature","sig","lastIndexOf","readData","size","checkOffset","result","slice","module","exports"],"mappings":";;;;AAAA;;AACA,IAAIA,aAAaC,QAAQ,cAAR,CAAjB;AACA,IAAIC,QAAQD,QAAQ,SAAR,CAAZ;;AAEA,SAASE,YAAT,CAAsBC,IAAtB,EAA4BC,qBAA5B,EAAmD;AAC/C,SAAKD,IAAL,GAAYA,IAAZ;AACA,QAAI,CAACC,qBAAL,EAA4B;AACxB,aAAKD,IAAL,GAAYF,MAAMI,aAAN,CAAoB,KAAKF,IAAzB,CAAZ;AACH;AACD,SAAKG,MAAL,GAAc,KAAKH,IAAL,CAAUG,MAAxB;AACA,SAAKC,KAAL,GAAa,CAAb;AACH;AACDL,aAAaM,SAAb,GAAyB,IAAIT,UAAJ,EAAzB;AACA;;;AAGAG,aAAaM,SAAb,CAAuBC,MAAvB,GAAgC,UAASC,CAAT,EAAY;AACxC,WAAO,KAAKP,IAAL,CAAUQ,UAAV,CAAqBD,CAArB,CAAP;AACH,CAFD;AAGA;;;AAGAR,aAAaM,SAAb,CAAuBI,oBAAvB,GAA8C,UAASC,GAAT,EAAc;AACxD,WAAO,KAAKV,IAAL,CAAUW,WAAV,CAAsBD,GAAtB,CAAP;AACH,CAFD;AAGA;;;AAGAX,aAAaM,SAAb,CAAuBO,QAAvB,GAAkC,UAASC,IAAT,EAAe;AAC7C,SAAKC,WAAL,CAAiBD,IAAjB;AACA;AACA,QAAIE,SAAS,KAAKf,IAAL,CAAUgB,KAAV,CAAgB,KAAKZ,KAArB,EAA4B,KAAKA,KAAL,GAAaS,IAAzC,CAAb;AACA,SAAKT,KAAL,IAAcS,IAAd;AACA,WAAOE,MAAP;AACH,CAND;AAOAE,OAAOC,OAAP,GAAiBnB,YAAjB","file":"stringReader.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\framework\\lib\\jszip","sourcesContent":["'use strict';\nvar DataReader = require('./dataReader');\nvar utils = require('./utils');\n\nfunction StringReader(data, optimizedBinaryString) {\n    this.data = data;\n    if (!optimizedBinaryString) {\n        this.data = utils.string2binary(this.data);\n    }\n    this.length = this.data.length;\n    this.index = 0;\n}\nStringReader.prototype = new DataReader();\n/**\n * @see DataReader.byteAt\n */\nStringReader.prototype.byteAt = function(i) {\n    return this.data.charCodeAt(i);\n};\n/**\n * @see DataReader.lastIndexOfSignature\n */\nStringReader.prototype.lastIndexOfSignature = function(sig) {\n    return this.data.lastIndexOf(sig);\n};\n/**\n * @see DataReader.readData\n */\nStringReader.prototype.readData = function(size) {\n    this.checkOffset(size);\n    // this will work because the constructor applied the \"& 0xff\" mask.\n    var result = this.data.slice(this.index, this.index + size);\n    this.index += size;\n    return result;\n};\nmodule.exports = StringReader;\n"]}