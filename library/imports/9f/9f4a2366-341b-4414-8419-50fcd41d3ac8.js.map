{"version":3,"sources":["..\\..\\..\\..\\..\\..\\assets\\modules\\game\\script/assets\\modules\\game\\script\\game.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\modules\\game\\script","sourcesContent":["import Emitter from \"../../../framework/modules/Emitter\";\r\nimport fightRandomSeed from \"./common/fightRandomSeed\";\r\nimport BaseGameFight from \"./baseClass/BaseGameFight\";\r\nimport fightBaseMissile from \"./missile/fightBaseMissile\";\r\n\r\n/*\r\nauthor: 黄凯\r\n日期:2018-11-19\r\n*/\r\n// 碰撞\r\nlet wmCollisionManager = require(\"hkCollisionManager\");\r\n// 物理\r\nimport HkPhysics from \"./physics/hkPhysics\";\r\n\r\n// 玩家操作数据单利\r\nimport PlayerCtrlData from \"./modles/PlayerCtrlData\";\r\n// 玩家管理器\r\nimport fightPlayerMgr from \"./fightPlayerMgr\";\r\n// 炮弹管理器\r\nimport fightMissileMgr from \"./fightMissileMgr\";\r\n// 快速开始游戏\r\nimport fightNetMgr from \"./net/fightNetMgr\";\r\n// 帧数池管理器\r\nimport fightNetPoolMgr from \"./net/fightNetPoolMgr\";\r\n// 工具\r\nimport fightTool from \"./common/fightTool\";\r\n// 游戏配置\r\nimport config from \"./common/gameConfig\";\r\n// 地图管理器\r\nimport MapMgr from \"./sceneMgr/mapMgr\";\r\n\r\n\r\nconst { netFrame , fightEvent , missileType ,missileBuffType } = config;\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n// 随机数\r\nlet randomSeed = fightRandomSeed.getInstance();\r\n// 事件\r\nlet emitter = Emitter.getInstance();\r\n// 物理\r\nlet wmPhysicsManager = HkPhysics.getInstance();\r\n// 单例玩家操作数据模型\r\nlet playerCtrlData = PlayerCtrlData.getInstance();\r\n// 地图管理器\r\nlet mapMgr:MapMgr = MapMgr.getInstance();\r\n\r\n@ccclass\r\nexport default class GameCtrl extends BaseGameFight{\r\n\r\n    // 玩家管理器\r\n    private fightPlayerMgr:fightPlayerMgr;\r\n    // 炮弹管理器\r\n    private fightMissileMgr:fightMissileMgr;\r\n    // 网络链接测试\r\n    private fightNetMgr:fightNetMgr;\r\n    // 帧管理器\r\n    private fightNetPoolMgr:fightNetPoolMgr;\r\n    // UI组件\r\n\r\n    // 玩家的预制体数组\r\n    @property([cc.Prefab])\r\n    rolePrefab: cc.Prefab[] = [];\r\n\r\n    // 导弹的预制体数组\r\n    @property([cc.Prefab])\r\n    missilePrefab: cc.Prefab[] = [];\r\n\r\n    // 父级节点\r\n    @property(cc.Node)\r\n    fatherNode: cc.Node = null;\r\n\r\n    // 玩家操作的ui\r\n    @property(cc.Prefab)\r\n    playerCircleCtrl: cc.Prefab = null;\r\n\r\n    // 前景图片节点\r\n    @property(cc.Node)\r\n    prospectNode: cc.Node = null;\r\n\r\n    // 地图前景图片\r\n    @property({type: cc.Texture2D})\r\n    prospectPicture:cc.Texture2D = null;\r\n\r\n    // 弹坑图片\r\n    @property({type: cc.Texture2D})\r\n    craterPicture:cc.Texture2D = null;\r\n    \r\n\r\n    init(){\r\n        this.fightPlayerMgr = new fightPlayerMgr();\r\n        this.fightNetMgr = new fightNetMgr();\r\n        this.fightNetPoolMgr = new fightNetPoolMgr();\r\n        this.fightMissileMgr = new fightMissileMgr();\r\n        wmPhysicsManager.enabled = true;\r\n        wmCollisionManager.enabled = true;\r\n        this.bindInit();\r\n        this.bindEvent();\r\n        mapMgr.initMap(this.fatherNode,this.prospectNode,this.prospectPicture,this.craterPicture);\r\n    }\r\n\r\n\r\n    bindEvent(){\r\n        // 绑定切换玩家事件 \r\n        emitter.on(fightEvent.changeProcess,this.changeProcess,this);\r\n        // 碰撞结算\r\n        emitter.on(fightEvent.colliderSettle,this.colliderSettle,this);\r\n    }\r\n\r\n    // 初始化一些绑定\r\n    bindInit(){\r\n        let netEvent = {\r\n            \"onMatch\":this.onMatch.bind(this),\r\n            \"onFightState\":this.onFightState.bind(this),\r\n            \"onFightFrame\":this.onFightFrame.bind(this),\r\n            \"matchState\":this.matchState.bind(this),\r\n            \"matchSuccess\":this.matchSuccess.bind(this)\r\n        };\r\n        this.fightNetMgr.init(netEvent);\r\n        this.fightMissileMgr.init(this.missilePrefab,this.fatherNode);\r\n        this.fightPlayerMgr.setFatherNode(this.fatherNode);\r\n    }\r\n\r\n    onLoad() {\r\n        // 测试匹配直接进入房间\r\n        this.init();\r\n        // 测试连接\r\n        this.fightNetMgr.connect((data)=>{\r\n            console.log(data);\r\n            this.fightNetMgr.match(\"1\",(data2)=>{\r\n                console.log(data2);\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    // ----------这部分某些是测试代码-------------\r\n    onMatch(data){\r\n        console.log(data);\r\n    }\r\n    // 战斗的状态情况\r\n    onFightState(data){\r\n        console.log(data);\r\n    }\r\n    // 将网络帧推送给真管理器\r\n    onFightFrame(data){\r\n        this.fightNetPoolMgr.addFrame(data.msg);\r\n    }\r\n    // 匹配中的状态\r\n    matchState(data){\r\n        let msg = data.msg;\r\n        switch (msg.state) {\r\n            case 7:\r\n                let info = msg.info;\r\n                // 这里初始化要注意和后面游戏正式准备产生冲突\r\n                console.log(\"开始游戏\",info)\r\n                // TODO 随机种子下发\r\n                randomSeed.init(2333);\r\n                this.fightPlayerMgr.init(this.rolePrefab,null);\r\n                // this.fightPlayerMgr.init(this.rolePrefab,info.playerInfo);\r\n                this.fightPlayerMgr.setMySeatId(info.mySeatId.toString());\r\n                this.fightPlayerMgr.setMyCircleCtrl(this.playerCircleCtrl);\r\n                // 战斗前准备\r\n                this.fightNetMgr.gameParpare(()=>{\r\n                    console.log(\"玩家准备了\");\r\n                });\r\n                // 这里可能暂时不同步\r\n                this.gameSwitch = true;\r\n                break;\r\n        }\r\n    }\r\n    // 匹配成功\r\n    matchSuccess(data){\r\n        console.log(\"匹配成功\",data);\r\n        // console.log(data);\r\n        // TODO 初始化随机种子\r\n    }\r\n\r\n    // ---------测试代码结束--------------\r\n\r\n\r\n    // 游戏流程切换\r\n    changeProcess(){\r\n        // TODO 单独做一个管理模块管理游戏进程中的事物\r\n\r\n        // 1，检测游戏是否已经结束 游戏结束不继续切换\r\n        // 2，场景物品切换 如宝箱 空投 龙卷风 火主 风向 等\r\n\r\n\r\n        // 3，玩家操作切换\r\n        this.frameTimeout(()=>{\r\n            this.fightPlayerMgr.changePlayer();\r\n            // 相机回弹\r\n            emitter.emit(fightEvent.setZoomRatio,1);\r\n        },3*netFrame);\r\n        console.log(\"切换流程\");\r\n    }\r\n\r\n\r\n    // 炮弹碰撞结算\r\n    colliderSettle(obj){\r\n\r\n        // 是否是飞机\r\n        let isPlane = obj.isPlane;\r\n        // 玩家的座位id\r\n        let seatId = obj.seatId;\r\n        // 炮弹的位置\r\n        let realPoi = obj.realPoi;\r\n        // 飞机不参与任何结算 爆炸等\r\n        if(isPlane){\r\n            // 位移玩家 \r\n            this.fightPlayerMgr.setPlayerNewPoi(seatId,realPoi);\r\n            return;\r\n        }\r\n        // 活着的玩家的点位信息\r\n        let seatIdToRealPoi = this.fightPlayerMgr.getLivePlayers();\r\n        // 椭圆半径\r\n        let ellipseRange = obj.ellipseRange;\r\n        // 导弹类型\r\n        let missBuffType = obj.missileBuffType;\r\n        // 子弹威力\r\n        let power = obj.power;\r\n        // 绘制弹坑碰撞体\r\n        let missilePoints = fightTool.createPoint(ellipseRange,realPoi);\r\n        // 挖坑实现\r\n        mapMgr.digHole(realPoi,ellipseRange);\r\n\r\n        // 碰撞检测 与 加血扣血\r\n        for(let seatId in seatIdToRealPoi){\r\n            let playerPoi = seatIdToRealPoi[seatId];\r\n            let isCollider = fightTool.pointInPolygon(playerPoi, missilePoints);\r\n            if(isCollider){\r\n                let player = this.fightPlayerMgr.getPlayerBySeatId(seatId);\r\n                player.resetPoi();\r\n                // 根据炮弹类型对玩家加血或者扣血操作\r\n                switch(missBuffType){\r\n                    case missileBuffType.sub:\r\n                    player.subHp(power);\r\n                    break;\r\n                    case missileBuffType.add:\r\n                    player.addHp(power);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // TODO 发送玩家操作数据\r\n    getSendFrameMsg(){\r\n        // 当前是我的回合\r\n        if(this.fightPlayerMgr.checkPlayerIsMine()){\r\n            let data = playerCtrlData.getData();\r\n            let msg = {\r\n                data: data\r\n            };\r\n            this.fightNetMgr.send(msg);\r\n        }\r\n        playerCtrlData.clear();\r\n    }\r\n\r\n\r\n    // 运行帧数据\r\n    doFrame(){\r\n        let hisFrameCount = this.fightNetPoolMgr.hisTroyFrameCount;\r\n        // 当开始1秒钟后 开始第一名玩家的操作\r\n        if(hisFrameCount === netFrame){\r\n            this.fightPlayerMgr.goPlayerAction();\r\n        }\r\n        // 获取玩家操作并发送操作数据\r\n        this.getSendFrameMsg();\r\n        // 获取最后一条数据\r\n        let msg = this.fightNetPoolMgr.getLastFrame();\r\n        // 更新玩家管理器\r\n        this.fightPlayerMgr.netFrame(msg);\r\n        // 触发逻辑运算\r\n        emitter.emit(fightEvent.netFrame);\r\n        // 检测地图与导弹的碰撞\r\n        this.checkMissileMapCollider();\r\n        // 物理更新\r\n        wmPhysicsManager.netFrame();\r\n        // 检测碰撞\r\n        wmCollisionManager.netFrame();\r\n        // 延迟事件\r\n        this.frameRun();\r\n    }\r\n\r\n\r\n    // 检测地图与炮弹的碰撞\r\n    checkMissileMapCollider(){\r\n        let missiles = this.fightMissileMgr.getAllLiveMissile();\r\n        for(let i = missiles.length-1;i>=0;i--){\r\n            let missile:fightBaseMissile = missiles[i];\r\n            let realPoi = missile.getRealPoi();\r\n            if(mapMgr.checkCollideGround(realPoi)){\r\n                missile.setRealPoi(mapMgr.getNextPoint(realPoi,0,0));\r\n                missile.onMapCollider();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // TODO ui部分单独移除做为管理器\r\n    // 游戏是否开始\r\n    gameSwitch:boolean;\r\n    // 整战斗中只有一个\r\n    update(dt) {\r\n\r\n        emitter.emit(fightEvent.netUpdate);\r\n        if (!this.gameSwitch) return;\r\n        // 是否可以运行逻辑\r\n        if(this.fightNetPoolMgr.getCanDoNetFrame(dt)){\r\n            this.doFrame();\r\n            // 帧数滞留的时候出现菊花\r\n            while(this.fightNetPoolMgr.checkCanWhile()){\r\n                this.doFrame();\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    // 销毁该管理器\r\n    onDestroy() {\r\n        emitter.off(fightEvent.changeProcess,this);\r\n        // super.onDestroy();\r\n    }\r\n}\r\n"]}