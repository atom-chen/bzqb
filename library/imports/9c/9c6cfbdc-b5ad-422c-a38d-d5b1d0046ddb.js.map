{"version":3,"sources":["..\\..\\..\\..\\..\\..\\..\\..\\assets\\modules\\game\\script\\physics\\hkcollider/assets\\modules\\game\\script\\physics\\hkcollider\\hkCollisionManager.js"],"names":["Contact","require","CollisionType","math","cc","vmath","_vec2","v2","obbApplyMatrix","rect","mat4","out_bl","out_tl","out_tr","out_br","x","y","width","height","m00","m01","m04","m05","m12","m13","tx","ty","xa","xb","yc","yd","hkCollisionManager","Class","mixins","EventTarget","properties","enabled","enabledDrawBoundingBox","ctor","_contacts","_colliders","_debugDrawer","_enabledDebugDraw","netFrame","dt","i","l","colliders","length","updateCollider","contacts","results","collisionType","updateState","None","push","result","_doCollide","drawColliders","contact","contactFunc","CollisionEnter","CollisionStay","CollisionExit","collider1","collider2","comps1","node","_components","comps2","comp","shouldCollide","c1","c2","node1","node2","collisionMatrix","game","groupIndex","initCollider","collider","world","aabb","preAabb","matrix","create","radius","BoxCollider","position","points","PolygonCollider","map","p","CircleCollider","offset","m","getWorldMatrix","size","wps","wp0","wp1","wp2","wp3","minx","Math","min","miny","maxx","max","maxy","vec2","transformMat4","tempx","tempy","d","sqrt","worldPoints","addCollider","index","indexOf","other","on","Node","EventType","GROUP_CHANGED","onNodeGroupChanged","removeCollider","splice","touching","off","getComponents","Collider","_checkDebugDrawValid","debugDrawer","clear","strokeColor","Color","WHITE","ps","moveTo","j","lineTo","close","stroke","circle","BLUE","xMin","yMin","yMax","xMax","isValid","zIndex","macro","MAX_ZINDEX","addPersistRootNode","addComponent","Graphics","module","exports"],"mappings":"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","file":"hkCollisionManager.js","sourceRoot":"..\\..\\..\\..\\..\\..\\..\\..\\assets\\modules\\game\\script\\physics\\hkcollider","sourcesContent":["\nconst Contact = require('hkContact');\nconst CollisionType = Contact.CollisionType;\nconst math = cc.vmath;\n\nlet _vec2 = cc.v2();\nfunction obbApplyMatrix (rect, mat4, out_bl, out_tl, out_tr, out_br) {\n    var x = rect.x;\n    var y = rect.y;\n    var width = rect.width;\n    var height = rect.height;\n\n    var m00 = mat4.m00, m01 = mat4.m01, m04 = mat4.m04, m05 = mat4.m05;\n    var m12 = mat4.m12, m13 = mat4.m13;\n\n    var tx = m00 * x + m04 * y + m12;\n    var ty = m01 * x + m05 * y + m13;\n    var xa = m00 * width;\n    var xb = m01 * width;\n    var yc = m04 * height;\n    var yd = m05 * height;\n\n    out_tl.x = tx;\n    out_tl.y = ty;\n    out_tr.x = xa + tx;\n    out_tr.y = xb + ty;\n    out_bl.x = yc + tx;\n    out_bl.y = yd + ty;\n    out_br.x = xa + yc + tx;\n    out_br.y = xb + yd + ty;\n};\n\nlet hkCollisionManager = cc.Class({\n    mixins: [cc.EventTarget],\n\n    properties: {\n        enabled: false,\n        enabledDrawBoundingBox: false\n    },\n\n    ctor: function () {\n        this._contacts = [];\n        this._colliders = [];\n        this._debugDrawer = null;\n        this._enabledDebugDraw = false;\n    },\n\n    netFrame: function (dt) {\n        if (!this.enabled) {\n            return;\n        }\n\n\n        let i, l;\n\n        // update collider\n        let colliders = this._colliders;\n        for (i = 0, l = colliders.length; i < l; i++) {\n            this.updateCollider(colliders[i]);\n        }\n\n        // do collide\n        let contacts = this._contacts;\n        let results = [];\n        \n        for (i = 0, l = contacts.length; i < l; i++) {\n            let collisionType = contacts[i].updateState();\n            if (collisionType === CollisionType.None) {\n                continue;\n            }\n\n            results.push([collisionType, contacts[i]]);\n        }\n        // handle collide results, emit message\n        for (i = 0, l = results.length; i < l; i++) {\n            let result = results[i];\n            this._doCollide(result[0], result[1]);\n        }\n        // draw colliders\n        this.drawColliders();\n    },\n\n    _doCollide: function (collisionType, contact) {\n        let contactFunc;\n        switch (collisionType) {\n            case CollisionType.CollisionEnter:\n                contactFunc = 'wmCollisionEnter';\n                break;\n            case CollisionType.CollisionStay:\n                contactFunc = 'wmCollisionStay';\n                break;\n            case CollisionType.CollisionExit:\n                contactFunc = 'wmCollisionExit';\n                break;\n        }\n\n        let collider1 = contact.collider1;\n        let collider2 = contact.collider2;\n\n        let comps1 = collider1.node._components;\n        let comps2 = collider2.node._components;\n\n        let i, l, comp;\n        for (i = 0, l = comps1.length; i < l; i++) {\n            comp = comps1[i];\n            if (comp[contactFunc]) {\n                comp[contactFunc](collider2, collider1);\n            }\n        }\n\n        for (i = 0, l = comps2.length; i < l; i++) {\n            comp = comps2[i];\n            if (comp[contactFunc]) {\n                comp[contactFunc](collider1, collider2);\n            }\n        }\n    }, \n\n    shouldCollide: function (c1, c2) {\n        let node1 = c1.node, node2 = c2.node;\n        let collisionMatrix = cc.game.collisionMatrix;\n        // console.log(\"collisionMatrix\",collisionMatrix);\n        return node1 !== node2 && collisionMatrix[node1.groupIndex][node2.groupIndex];\n    },\n\n    initCollider: function (collider) {\n        if (!collider.world) {\n            let world = collider.world = {};\n            world.aabb = cc.rect();\n            world.preAabb = cc.rect();\n            world.matrix = math.mat4.create();\n\n            world.radius = 0;\n\n            if (collider instanceof cc.BoxCollider) {\n                world.position = null;\n                world.points = [cc.v2(), cc.v2(), cc.v2(), cc.v2()];\n            }\n            else if (collider instanceof cc.PolygonCollider) {\n                world.position = null;\n                world.points = collider.points.map(function (p) {\n                    return cc.v2(p.x, p.y);\n                });\n            }\n            else if (collider instanceof cc.CircleCollider) {\n                world.position = cc.v2();\n                world.points = null;\n            }\n        }\n    },\n\n    updateCollider: function (collider) {\n        let offset = collider.offset;\n        let world = collider.world;\n        let aabb = world.aabb;\n\n        let m = world.matrix;\n        collider.node.getWorldMatrix(m);\n\n        let preAabb = world.preAabb;\n        preAabb.x = aabb.x;\n        preAabb.y = aabb.y;\n        preAabb.width = aabb.width;\n        preAabb.height = aabb.height;\n\n        if (collider instanceof cc.BoxCollider) {\n            let size = collider.size;\n\n            aabb.x = offset.x - size.width/2;\n            aabb.y = offset.y - size.height/2;\n            aabb.width = size.width;\n            aabb.height = size.height;\n\n            let wps = world.points;\n            let wp0 = wps[0], wp1 = wps[1],\n                wp2 = wps[2], wp3 = wps[3];\n            obbApplyMatrix(aabb, m, wp0, wp1, wp2, wp3);\n\n            let minx = Math.min(wp0.x, wp1.x, wp2.x, wp3.x);\n            let miny = Math.min(wp0.y, wp1.y, wp2.y, wp3.y);\n            let maxx = Math.max(wp0.x, wp1.x, wp2.x, wp3.x);\n            let maxy = Math.max(wp0.y, wp1.y, wp2.y, wp3.y);\n\n            aabb.x = minx;\n            aabb.y = miny;\n            aabb.width = maxx - minx;\n            aabb.height = maxy - miny;\n        }\n        else if (collider instanceof cc.CircleCollider) {\n            // calculate world position\n            math.vec2.transformMat4(_vec2, collider.offset, m);\n\n            world.position.x = _vec2.x;\n            world.position.y = _vec2.y;\n\n            // calculate world radius\n            let tempx = m.m12, tempy = m.m13;\n            m.m12 = m.m13 = 0;\n\n            _vec2.x = collider.radius;\n            _vec2.y = 0;\n\n            math.vec2.transformMat4(_vec2, _vec2, m);\n            let d = Math.sqrt(_vec2.x * _vec2.x + _vec2.y * _vec2.y);\n\n            world.radius = d;\n\n            aabb.x = world.position.x - d;\n            aabb.y = world.position.y - d;\n            aabb.width = d * 2;\n            aabb.height = d * 2;\n\n            m.m12 = tempx;\n            m.m13 = tempy;\n        }\n        else if (collider instanceof cc.PolygonCollider) {\n            let points = collider.points;\n            let worldPoints = world.points;\n\n            worldPoints.length = points.length;\n\n            let minx = 1e6, miny = 1e6, maxx = -1e6, maxy = -1e6;\n            for (let i = 0, l = points.length; i < l; i++) {\n                if (!worldPoints[i]) {\n                    worldPoints[i] = cc.v2();\n                }\n\n                _vec2.x = points[i].x + offset.x;\n                _vec2.y = points[i].y + offset.y;\n                \n                math.vec2.transformMat4(_vec2, _vec2, m);\n                \n                let x = _vec2.x;\n                let y = _vec2.y;\n\n                worldPoints[i].x = x;\n                worldPoints[i].y = y;\n\n                if (x > maxx) maxx = x;\n                if (x < minx) minx = x;\n                if (y > maxy) maxy = y;\n                if (y < miny) miny = y;\n            }\n\n            aabb.x = minx;\n            aabb.y = miny;\n            aabb.width = maxx - minx;\n            aabb.height = maxy - miny;\n        }\n    },\n\n    addCollider: function (collider) {\n        let colliders = this._colliders;\n        let index = colliders.indexOf(collider);\n        if (index === -1) {\n            for (let i = 0, l = colliders.length; i < l; i++) {\n                let other = colliders[i];\n                if (this.shouldCollide(collider, other)) {\n                    let contact = new Contact(collider, other);\n                    this._contacts.push(contact);\n                }\n            }\n\n            colliders.push(collider);\n            this.initCollider(collider);\n        }\n\n        collider.node.on(cc.Node.EventType.GROUP_CHANGED, this.onNodeGroupChanged, this);\n    },\n\n    removeCollider: function (collider) {\n        let colliders = this._colliders;\n        let index = colliders.indexOf(collider);\n        if (index >= 0) {\n            colliders.splice(index, 1);\n\n            let contacts = this._contacts;\n            for (let i = contacts.length - 1; i >= 0; i--) {\n                let contact = contacts[i];\n                if (contact.collider1 === collider || contact.collider2 === collider) {\n                    if (contact.touching) {\n                        // this._doCollide(CollisionType.CollisionExit, contact);\n                    }\n\n                    contacts.splice(i, 1);\n                }\n            }\n\n            collider.node.off(cc.Node.EventType.GROUP_CHANGED, this.onNodeGroupChanged, this);\n        }\n        // else {\n        //     cc.errorID(6600);\n        // }\n    },\n\n    onNodeGroupChanged: function (node) {\n        let colliders = node.getComponents(cc.Collider);\n\n        for (let i = 0, l = colliders.length; i < l; i++) {\n            this.removeCollider(colliders[i]);\n            this.addCollider(colliders[i]);\n        }\n    },\n\n    drawColliders: function () {\n        if (!this._enabledDebugDraw) {\n            return;\n        }\n\n        this._checkDebugDrawValid();\n\n        let debugDrawer = this._debugDrawer;\n        debugDrawer.clear();\n\n        let colliders = this._colliders;\n\n        for (let i = 0, l = colliders.length; i < l; i++) {\n            let collider = colliders[i];\n\n            debugDrawer.strokeColor = cc.Color.WHITE;\n            if (collider instanceof cc.BoxCollider || collider instanceof cc.PolygonCollider) {\n                let ps = collider.world.points;\n                if (ps.length > 0) {\n                    debugDrawer.moveTo(ps[0].x, ps[0].y);\n                    for (let j = 1; j < ps.length; j++) {\n                        debugDrawer.lineTo(ps[j].x, ps[j].y);\n                    }\n                    debugDrawer.close();\n                    debugDrawer.stroke();\n                }\n            }\n            else if (collider instanceof cc.CircleCollider) {\n                debugDrawer.circle(collider.world.position.x, collider.world.position.y, collider.world.radius);\n                debugDrawer.stroke();\n            }\n\n            if (this.enabledDrawBoundingBox) {\n                let aabb = collider.world.aabb;\n                \n                debugDrawer.strokeColor = cc.Color.BLUE;\n                \n                debugDrawer.moveTo(aabb.xMin, aabb.yMin);\n                debugDrawer.lineTo(aabb.xMin, aabb.yMax);\n                debugDrawer.lineTo(aabb.xMax, aabb.yMax);\n                debugDrawer.lineTo(aabb.xMax, aabb.yMin);\n\n                debugDrawer.close();\n                debugDrawer.stroke();\n            }\n        }\n    },\n\n    _checkDebugDrawValid () {\n        if (!this._debugDrawer || !this._debugDrawer.isValid) {\n            let node = new cc.Node('COLLISION_MANAGER_DEBUG_DRAW');\n            node.zIndex = cc.macro.MAX_ZINDEX;\n            cc.game.addPersistRootNode(node);\n            this._debugDrawer = node.addComponent(cc.Graphics);\n        }\n    }\n});\n\n\nmodule.exports = new hkCollisionManager();\n"]}