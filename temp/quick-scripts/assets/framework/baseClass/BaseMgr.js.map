{"version":3,"sources":["BaseMgr.ts"],"names":[],"mappings":";;;;;AAAA,8CAAyC;AACzC,kDAA6C;AAC7C,8CAAyC;AACzC,4CAAuC;AAGvC,QAAQ;AACR;IAEI;QACI,iBAAO,CAAC,WAAW,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IACrB,CAAC;IAEM,0BAAQ,GAAf,UAAgB,KAAa,EAAE,GAAY;QACvC,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC/D,CAAC;IAED,QAAQ;IACD,uBAAK,GAAZ,UAAa,KAAa;QAAE,aAAa;aAAb,UAAa,EAAb,qBAAa,EAAb,IAAa;YAAb,4BAAa;;;QACrC,OAAO,CAAA,KAAA,iBAAO,CAAC,WAAW,EAAE,CAAA,CAAC,IAAI,YAAC,KAAK,SAAK,GAAG,GAAE;IACrD,CAAC;IAEM,0BAAQ,GAAf,UAAgB,KAAa,EAAE,GAAS;QACpC,OAAO,iBAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IACtD,CAAC;IAEM,4BAAU,GAAjB,UAAkB,UAAkB;QAChC,OAAO,gBAAM,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,YAAU,UAAY,CAAC,CAAC;IACnE,CAAC;IAEM,+BAAa,GAApB,UAAqB,UAAkB;QACnC,IAAI,GAAG,GAAG,mBAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QAClE,OAAO,gBAAM,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,CAAC;IAC1D,CAAC;IAED;;;OAGA;IACU,+BAAa,GAAvB,UAAwB,UAAkB,EAAE,QAAyB;QAAzB,yBAAA,EAAA,gBAAyB;QACjE,OAAO,mBAAS,CAAC,WAAW,EAAE,CAAC,aAAa,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IACvE,CAAC;IAEM,6BAAW,GAAlB,UAAmB,UAAkB;QACjC,mBAAS,CAAC,WAAW,EAAE,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;IACpD,CAAC;IACD;;;OAGA;IACU,6BAAW,GAArB,UAAsB,SAAiB;QACnC,mBAAS,CAAC,WAAW,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IACnD,CAAC;IAEM,yBAAO,GAAd;QACI,iBAAO,CAAC,WAAW,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC;IACL,cAAC;AAAD,CAnDA,AAmDC,IAAA","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\framework\\baseClass","sourcesContent":["import GameNet from \"../modules/GameNet\";\r\nimport ModuleMgr from \"../modules/ModuleMgr\";\r\nimport Emitter from \"../modules/Emitter\";\r\nimport Loader from \"../modules/Loader\";\r\nimport Package from \"../net/package\";\r\n\r\n//基础的管理器\r\nexport default class BaseMgr {\r\n    protected routes: object;\r\n    constructor() {\r\n        Emitter.getInstance().registerRoute(this);\r\n        this.routes = {};\r\n    }\r\n\r\n    public dealResp(route: string, msg: Package): void {\r\n        if (this.routes[route]) this.routes[route].call(this, msg);\r\n    }\r\n\r\n    //发送全局事件\r\n    public gemit(event: string, ...arg: any[]): boolean {\r\n        return Emitter.getInstance().emit(event, ...arg);\r\n    }\r\n\r\n    public send_msg(route: string, msg?: any): void {\r\n        return GameNet.getInstance().send_msg(route, msg);\r\n    }\r\n\r\n    public loadConfig(configName: string): Promise<cc.JsonAsset> {\r\n        return Loader.getInstance().loadConfig(`config/${configName}`);\r\n    }\r\n\r\n    public getConfigSync(configName: string): cc.JsonAsset {\r\n        let url = ModuleMgr.getInstance().getResUrl(\"config\", configName);\r\n        return Loader.getInstance().getRes(url, cc.JsonAsset);\r\n    }\r\n\r\n    /**\r\n\t * 打开子模块\r\n\t * @param moduleName 模块名\r\n\t */\r\n    protected openSubModule(moduleName: string, isPublic: boolean = false): Promise<any> {\r\n        return ModuleMgr.getInstance().openSubModule(moduleName, isPublic);\r\n    }\r\n\r\n    public closeModule(moduleName: string): void {\r\n        ModuleMgr.getInstance().closeModule(moduleName);\r\n    }\r\n    /**\r\n\t * 切换场景\r\n\t * @param sceneName 场景名\r\n\t */\r\n    protected switchScene(sceneName: string): void {\r\n        ModuleMgr.getInstance().switchScene(sceneName);\r\n    }\r\n\r\n    public destroy(): void {\r\n        Emitter.getInstance().unregisterRoute(this);\r\n    }\r\n}\r\n"]}