{"version":3,"sources":["utils.js"],"names":["support","require","compressions","nodeBuffer","exports","string2binary","str","result","i","length","String","fromCharCode","charCodeAt","arrayBuffer2Blob","buffer","mimeType","checkSupport","Blob","type","e","Builder","window","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","builder","append","getBlob","Error","identity","input","stringToArrayLike","array","arrayLikeToString","chunk","len","getTypeOf","k","canUseApply","apply","Uint8Array","resultStr","push","slice","Math","min","subarray","floor","join","applyFromCharCode","arrayLikeToArrayLike","arrayFrom","arrayTo","transform","Array","byteLength","transformTo","outputType","inputType","Object","prototype","toString","call","nodebuffer","test","uint8array","arraybuffer","ArrayBuffer","supported","toLowerCase","MAX_VALUE_16BITS","MAX_VALUE_32BITS","pretty","res","code","toUpperCase","findCompression","compressionMethod","method","hasOwnProperty","magic","isRegExp","object"],"mappings":"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","file":"utils.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\framework\\lib\\jszip","sourcesContent":["'use strict';\nvar support = require('./support');\nvar compressions = require('./compressions');\nvar nodeBuffer = require('./nodeBuffer');\n/**\n * Convert a string to a \"binary string\" : a string containing only char codes between 0 and 255.\n * @param {string} str the string to transform.\n * @return {String} the binary string.\n */\nexports.string2binary = function(str) {\n    var result = \"\";\n    for (var i = 0; i < str.length; i++) {\n        result += String.fromCharCode(str.charCodeAt(i) & 0xff);\n    }\n    return result;\n};\nexports.arrayBuffer2Blob = function(buffer, mimeType) {\n    exports.checkSupport(\"blob\");\n\tmimeType = mimeType || 'application/zip';\n\n    try {\n        // Blob constructor\n        return new Blob([buffer], {\n            type: mimeType\n        });\n    }\n    catch (e) {\n\n        try {\n            // deprecated, browser only, old way\n            var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n            var builder = new Builder();\n            builder.append(buffer);\n            return builder.getBlob(mimeType);\n        }\n        catch (e) {\n\n            // well, fuck ?!\n            throw new Error(\"Bug : can't construct the Blob.\");\n        }\n    }\n\n\n};\n/**\n * The identity function.\n * @param {Object} input the input.\n * @return {Object} the same input.\n */\nfunction identity(input) {\n    return input;\n}\n\n/**\n * Fill in an array with a string.\n * @param {String} str the string to use.\n * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to fill in (will be mutated).\n * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated array.\n */\nfunction stringToArrayLike(str, array) {\n    for (var i = 0; i < str.length; ++i) {\n        array[i] = str.charCodeAt(i) & 0xFF;\n    }\n    return array;\n}\n\n/**\n * Transform an array-like object to a string.\n * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.\n * @return {String} the result.\n */\nfunction arrayLikeToString(array) {\n    // Performances notes :\n    // --------------------\n    // String.fromCharCode.apply(null, array) is the fastest, see\n    // see http://jsperf.com/converting-a-uint8array-to-a-string/2\n    // but the stack is limited (and we can get huge arrays !).\n    //\n    // result += String.fromCharCode(array[i]); generate too many strings !\n    //\n    // This code is inspired by http://jsperf.com/arraybuffer-to-string-apply-performance/2\n    var chunk = 65536;\n    var result = [],\n        len = array.length,\n        type = exports.getTypeOf(array),\n        k = 0,\n        canUseApply = true;\n      try {\n         switch(type) {\n            case \"uint8array\":\n               String.fromCharCode.apply(null, new Uint8Array(0));\n               break;\n            case \"nodebuffer\":\n               String.fromCharCode.apply(null, nodeBuffer(0));\n               break;\n         }\n      } catch(e) {\n         canUseApply = false;\n      }\n\n      // no apply : slow and painful algorithm\n      // default browser on android 4.*\n      if (!canUseApply) {\n         var resultStr = \"\";\n         for(var i = 0; i < array.length;i++) {\n            resultStr += String.fromCharCode(array[i]);\n         }\n    return resultStr;\n    }\n    while (k < len && chunk > 1) {\n        try {\n            if (type === \"array\" || type === \"nodebuffer\") {\n                result.push(String.fromCharCode.apply(null, array.slice(k, Math.min(k + chunk, len))));\n            }\n            else {\n                result.push(String.fromCharCode.apply(null, array.subarray(k, Math.min(k + chunk, len))));\n            }\n            k += chunk;\n        }\n        catch (e) {\n            chunk = Math.floor(chunk / 2);\n        }\n    }\n    return result.join(\"\");\n}\n\nexports.applyFromCharCode = arrayLikeToString;\n\n\n/**\n * Copy the data from an array-like to an other array-like.\n * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayFrom the origin array.\n * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayTo the destination array which will be mutated.\n * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated destination array.\n */\nfunction arrayLikeToArrayLike(arrayFrom, arrayTo) {\n    for (var i = 0; i < arrayFrom.length; i++) {\n        arrayTo[i] = arrayFrom[i];\n    }\n    return arrayTo;\n}\n\n// a matrix containing functions to transform everything into everything.\nvar transform = {};\n\n// string to ?\ntransform[\"string\"] = {\n    \"string\": identity,\n    \"array\": function(input) {\n        return stringToArrayLike(input, new Array(input.length));\n    },\n    \"arraybuffer\": function(input) {\n        return transform[\"string\"][\"uint8array\"](input).buffer;\n    },\n    \"uint8array\": function(input) {\n        return stringToArrayLike(input, new Uint8Array(input.length));\n    },\n    \"nodebuffer\": function(input) {\n        return stringToArrayLike(input, nodeBuffer(input.length));\n    }\n};\n\n// array to ?\ntransform[\"array\"] = {\n    \"string\": arrayLikeToString,\n    \"array\": identity,\n    \"arraybuffer\": function(input) {\n        return (new Uint8Array(input)).buffer;\n    },\n    \"uint8array\": function(input) {\n        return new Uint8Array(input);\n    },\n    \"nodebuffer\": function(input) {\n        return nodeBuffer(input);\n    }\n};\n\n// arraybuffer to ?\ntransform[\"arraybuffer\"] = {\n    \"string\": function(input) {\n        return arrayLikeToString(new Uint8Array(input));\n    },\n    \"array\": function(input) {\n        return arrayLikeToArrayLike(new Uint8Array(input), new Array(input.byteLength));\n    },\n    \"arraybuffer\": identity,\n    \"uint8array\": function(input) {\n        return new Uint8Array(input);\n    },\n    \"nodebuffer\": function(input) {\n        return nodeBuffer(new Uint8Array(input));\n    }\n};\n\n// uint8array to ?\ntransform[\"uint8array\"] = {\n    \"string\": arrayLikeToString,\n    \"array\": function(input) {\n        return arrayLikeToArrayLike(input, new Array(input.length));\n    },\n    \"arraybuffer\": function(input) {\n        return input.buffer;\n    },\n    \"uint8array\": identity,\n    \"nodebuffer\": function(input) {\n        return nodeBuffer(input);\n    }\n};\n\n// nodebuffer to ?\ntransform[\"nodebuffer\"] = {\n    \"string\": arrayLikeToString,\n    \"array\": function(input) {\n        return arrayLikeToArrayLike(input, new Array(input.length));\n    },\n    \"arraybuffer\": function(input) {\n        return transform[\"nodebuffer\"][\"uint8array\"](input).buffer;\n    },\n    \"uint8array\": function(input) {\n        return arrayLikeToArrayLike(input, new Uint8Array(input.length));\n    },\n    \"nodebuffer\": identity\n};\n\n/**\n * Transform an input into any type.\n * The supported output type are : string, array, uint8array, arraybuffer, nodebuffer.\n * If no output type is specified, the unmodified input will be returned.\n * @param {String} outputType the output type.\n * @param {String|Array|ArrayBuffer|Uint8Array|Buffer} input the input to convert.\n * @throws {Error} an Error if the browser doesn't support the requested output type.\n */\nexports.transformTo = function(outputType, input) {\n    if (!input) {\n        // undefined, null, etc\n        // an empty string won't harm.\n        input = \"\";\n    }\n    if (!outputType) {\n        return input;\n    }\n    exports.checkSupport(outputType);\n    var inputType = exports.getTypeOf(input);\n    var result = transform[inputType][outputType](input);\n    return result;\n};\n\n/**\n * Return the type of the input.\n * The type will be in a format valid for JSZip.utils.transformTo : string, array, uint8array, arraybuffer.\n * @param {Object} input the input to identify.\n * @return {String} the (lowercase) type of the input.\n */\nexports.getTypeOf = function(input) {\n    if (typeof input === \"string\") {\n        return \"string\";\n    }\n    if (Object.prototype.toString.call(input) === \"[object Array]\") {\n        return \"array\";\n    }\n    if (support.nodebuffer && nodeBuffer.test(input)) {\n        return \"nodebuffer\";\n    }\n    if (support.uint8array && input instanceof Uint8Array) {\n        return \"uint8array\";\n    }\n    if (support.arraybuffer && input instanceof ArrayBuffer) {\n        return \"arraybuffer\";\n    }\n};\n\n/**\n * Throw an exception if the type is not supported.\n * @param {String} type the type to check.\n * @throws {Error} an Error if the browser doesn't support the requested type.\n */\nexports.checkSupport = function(type) {\n    var supported = support[type.toLowerCase()];\n    if (!supported) {\n        throw new Error(type + \" is not supported by this browser\");\n    }\n};\nexports.MAX_VALUE_16BITS = 65535;\nexports.MAX_VALUE_32BITS = -1; // well, \"\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\" is parsed as -1\n\n/**\n * Prettify a string read as binary.\n * @param {string} str the string to prettify.\n * @return {string} a pretty string.\n */\nexports.pretty = function(str) {\n    var res = '',\n        code, i;\n    for (i = 0; i < (str || \"\").length; i++) {\n        code = str.charCodeAt(i);\n        res += '\\\\x' + (code < 16 ? \"0\" : \"\") + code.toString(16).toUpperCase();\n    }\n    return res;\n};\n\n/**\n * Find a compression registered in JSZip.\n * @param {string} compressionMethod the method magic to find.\n * @return {Object|null} the JSZip compression object, null if none found.\n */\nexports.findCompression = function(compressionMethod) {\n    for (var method in compressions) {\n        if (!compressions.hasOwnProperty(method)) {\n            continue;\n        }\n        if (compressions[method].magic === compressionMethod) {\n            return compressions[method];\n        }\n    }\n    return null;\n};\n/**\n* Cross-window, cross-Node-context regular expression detection\n* @param  {Object}  object Anything\n* @return {Boolean}        true if the object is a regular expression,\n* false otherwise\n*/\nexports.isRegExp = function (object) {\n    return Object.prototype.toString.call(object) === \"[object RegExp]\";\n};\n\n"]}