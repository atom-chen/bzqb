{"version":3,"sources":["zipEntry.js"],"names":["StringReader","require","utils","CompressedObject","jszipProto","MADE_BY_DOS","MADE_BY_UNIX","ZipEntry","options","loadOptions","prototype","isEncrypted","bitFlag","useUTF8","prepareCompressedContent","reader","from","length","previousIndex","index","setIndex","compressedFileData","readData","prepareContent","compression","uncompressedSize","transformTo","uncompressInputType","getCompressedContent","uncompressedFileData","uncompress","Error","readLocalPart","localExtraFieldsLength","skip","fileNameLength","readInt","fileName","readString","compressedSize","findCompression","compressionMethod","pretty","decompressed","crc32","getContent","checkCRC32","readCentralPart","versionMadeBy","versionNeeded","date","readDate","extraFieldsLength","fileCommentLength","diskNumberStart","internalFileAttributes","externalFileAttributes","localHeaderOffset","readExtraFields","parseZIP64ExtraField","fileComment","processAttributes","unixPermissions","dosPermissions","madeBy","dir","slice","extraFields","extraReader","value","MAX_VALUE_32BITS","start","extraFieldId","extraFieldLength","extraFieldValue","id","handleUTF8","utf8decode","upath","findExtraFieldUnicodePath","ucomment","findExtraFieldUnicodeComment","upathField","ucommentField","module","exports"],"mappings":"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","file":"zipEntry.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\framework\\lib\\jszip","sourcesContent":["'use strict';\nvar StringReader = require('./stringReader');\nvar utils = require('./utils');\nvar CompressedObject = require('./compressedObject');\nvar jszipProto = require('./object');\n\nvar MADE_BY_DOS = 0x00;\nvar MADE_BY_UNIX = 0x03;\n\n// class ZipEntry {{{\n/**\n * An entry in the zip file.\n * @constructor\n * @param {Object} options Options of the current file.\n * @param {Object} loadOptions Options for loading the stream.\n */\nfunction ZipEntry(options, loadOptions) {\n    this.options = options;\n    this.loadOptions = loadOptions;\n}\nZipEntry.prototype = {\n    /**\n     * say if the file is encrypted.\n     * @return {boolean} true if the file is encrypted, false otherwise.\n     */\n    isEncrypted: function() {\n        // bit 1 is set\n        return (this.bitFlag & 0x0001) === 0x0001;\n    },\n    /**\n     * say if the file has utf-8 filename/comment.\n     * @return {boolean} true if the filename/comment is in utf-8, false otherwise.\n     */\n    useUTF8: function() {\n        // bit 11 is set\n        return (this.bitFlag & 0x0800) === 0x0800;\n    },\n    /**\n     * Prepare the function used to generate the compressed content from this ZipFile.\n     * @param {DataReader} reader the reader to use.\n     * @param {number} from the offset from where we should read the data.\n     * @param {number} length the length of the data to read.\n     * @return {Function} the callback to get the compressed content (the type depends of the DataReader class).\n     */\n    prepareCompressedContent: function(reader, from, length) {\n        return function() {\n            var previousIndex = reader.index;\n            reader.setIndex(from);\n            var compressedFileData = reader.readData(length);\n            reader.setIndex(previousIndex);\n\n            return compressedFileData;\n        };\n    },\n    /**\n     * Prepare the function used to generate the uncompressed content from this ZipFile.\n     * @param {DataReader} reader the reader to use.\n     * @param {number} from the offset from where we should read the data.\n     * @param {number} length the length of the data to read.\n     * @param {JSZip.compression} compression the compression used on this file.\n     * @param {number} uncompressedSize the uncompressed size to expect.\n     * @return {Function} the callback to get the uncompressed content (the type depends of the DataReader class).\n     */\n    prepareContent: function(reader, from, length, compression, uncompressedSize) {\n        return function() {\n\n            var compressedFileData = utils.transformTo(compression.uncompressInputType, this.getCompressedContent());\n            var uncompressedFileData = compression.uncompress(compressedFileData);\n\n            if (uncompressedFileData.length !== uncompressedSize) {\n                throw new Error(\"Bug : uncompressed data size mismatch\");\n            }\n\n            return uncompressedFileData;\n        };\n    },\n    /**\n     * Read the local part of a zip file and add the info in this object.\n     * @param {DataReader} reader the reader to use.\n     */\n    readLocalPart: function(reader) {\n        var compression, localExtraFieldsLength;\n\n        // we already know everything from the central dir !\n        // If the central dir data are false, we are doomed.\n        // On the bright side, the local part is scary  : zip64, data descriptors, both, etc.\n        // The less data we get here, the more reliable this should be.\n        // Let's skip the whole header and dash to the data !\n        reader.skip(22);\n        // in some zip created on windows, the filename stored in the central dir contains \\ instead of /.\n        // Strangely, the filename here is OK.\n        // I would love to treat these zip files as corrupted (see http://www.info-zip.org/FAQ.html#backslashes\n        // or APPNOTE#4.4.17.1, \"All slashes MUST be forward slashes '/'\") but there are a lot of bad zip generators...\n        // Search \"unzip mismatching \"local\" filename continuing with \"central\" filename version\" on\n        // the internet.\n        //\n        // I think I see the logic here : the central directory is used to display\n        // content and the local directory is used to extract the files. Mixing / and \\\n        // may be used to display \\ to windows users and use / when extracting the files.\n        // Unfortunately, this lead also to some issues : http://seclists.org/fulldisclosure/2009/Sep/394\n        this.fileNameLength = reader.readInt(2);\n        localExtraFieldsLength = reader.readInt(2); // can't be sure this will be the same as the central dir\n        this.fileName = reader.readString(this.fileNameLength);\n        reader.skip(localExtraFieldsLength);\n\n        if (this.compressedSize == -1 || this.uncompressedSize == -1) {\n            throw new Error(\"Bug or corrupted zip : didn't get enough informations from the central directory \" + \"(compressedSize == -1 || uncompressedSize == -1)\");\n        }\n\n        compression = utils.findCompression(this.compressionMethod);\n        if (compression === null) { // no compression found\n            throw new Error(\"Corrupted zip : compression \" + utils.pretty(this.compressionMethod) + \" unknown (inner file : \" + this.fileName + \")\");\n        }\n        this.decompressed = new CompressedObject();\n        this.decompressed.compressedSize = this.compressedSize;\n        this.decompressed.uncompressedSize = this.uncompressedSize;\n        this.decompressed.crc32 = this.crc32;\n        this.decompressed.compressionMethod = this.compressionMethod;\n        this.decompressed.getCompressedContent = this.prepareCompressedContent(reader, reader.index, this.compressedSize, compression);\n        this.decompressed.getContent = this.prepareContent(reader, reader.index, this.compressedSize, compression, this.uncompressedSize);\n\n        // we need to compute the crc32...\n        if (this.loadOptions.checkCRC32) {\n            this.decompressed = utils.transformTo(\"string\", this.decompressed.getContent());\n            if (jszipProto.crc32(this.decompressed) !== this.crc32) {\n                throw new Error(\"Corrupted zip : CRC32 mismatch\");\n            }\n        }\n    },\n\n    /**\n     * Read the central part of a zip file and add the info in this object.\n     * @param {DataReader} reader the reader to use.\n     */\n    readCentralPart: function(reader) {\n        this.versionMadeBy = reader.readInt(2);\n        this.versionNeeded = reader.readInt(2);\n        this.bitFlag = reader.readInt(2);\n        this.compressionMethod = reader.readString(2);\n        this.date = reader.readDate();\n        this.crc32 = reader.readInt(4);\n        this.compressedSize = reader.readInt(4);\n        this.uncompressedSize = reader.readInt(4);\n        this.fileNameLength = reader.readInt(2);\n        this.extraFieldsLength = reader.readInt(2);\n        this.fileCommentLength = reader.readInt(2);\n        this.diskNumberStart = reader.readInt(2);\n        this.internalFileAttributes = reader.readInt(2);\n        this.externalFileAttributes = reader.readInt(4);\n        this.localHeaderOffset = reader.readInt(4);\n\n        if (this.isEncrypted()) {\n            throw new Error(\"Encrypted zip are not supported\");\n        }\n\n        this.fileName = reader.readString(this.fileNameLength);\n        this.readExtraFields(reader);\n        this.parseZIP64ExtraField(reader);\n        this.fileComment = reader.readString(this.fileCommentLength);\n    },\n\n    /**\n     * Parse the external file attributes and get the unix/dos permissions.\n     */\n    processAttributes: function () {\n        this.unixPermissions = null;\n        this.dosPermissions = null;\n        var madeBy = this.versionMadeBy >> 8;\n\n        // Check if we have the DOS directory flag set.\n        // We look for it in the DOS and UNIX permissions\n        // but some unknown platform could set it as a compatibility flag.\n        this.dir = this.externalFileAttributes & 0x0010 ? true : false;\n\n        if(madeBy === MADE_BY_DOS) {\n            // first 6 bits (0 to 5)\n            this.dosPermissions = this.externalFileAttributes & 0x3F;\n        }\n\n        if(madeBy === MADE_BY_UNIX) {\n            this.unixPermissions = (this.externalFileAttributes >> 16) & 0xFFFF;\n            // the octal permissions are in (this.unixPermissions & 0x01FF).toString(8);\n        }\n\n        // fail safe : if the name ends with a / it probably means a folder\n        if (!this.dir && this.fileName.slice(-1) === '/') {\n            this.dir = true;\n        }\n    },\n\n    /**\n     * Parse the ZIP64 extra field and merge the info in the current ZipEntry.\n     * @param {DataReader} reader the reader to use.\n     */\n    parseZIP64ExtraField: function(reader) {\n\n        if (!this.extraFields[0x0001]) {\n            return;\n        }\n\n        // should be something, preparing the extra reader\n        var extraReader = new StringReader(this.extraFields[0x0001].value);\n\n        // I really hope that these 64bits integer can fit in 32 bits integer, because js\n        // won't let us have more.\n        if (this.uncompressedSize === utils.MAX_VALUE_32BITS) {\n            this.uncompressedSize = extraReader.readInt(8);\n        }\n        if (this.compressedSize === utils.MAX_VALUE_32BITS) {\n            this.compressedSize = extraReader.readInt(8);\n        }\n        if (this.localHeaderOffset === utils.MAX_VALUE_32BITS) {\n            this.localHeaderOffset = extraReader.readInt(8);\n        }\n        if (this.diskNumberStart === utils.MAX_VALUE_32BITS) {\n            this.diskNumberStart = extraReader.readInt(4);\n        }\n    },\n    /**\n     * Read the central part of a zip file and add the info in this object.\n     * @param {DataReader} reader the reader to use.\n     */\n    readExtraFields: function(reader) {\n        var start = reader.index,\n            extraFieldId,\n            extraFieldLength,\n            extraFieldValue;\n\n        this.extraFields = this.extraFields || {};\n\n        while (reader.index < start + this.extraFieldsLength) {\n            extraFieldId = reader.readInt(2);\n            extraFieldLength = reader.readInt(2);\n            extraFieldValue = reader.readString(extraFieldLength);\n\n            this.extraFields[extraFieldId] = {\n                id: extraFieldId,\n                length: extraFieldLength,\n                value: extraFieldValue\n            };\n        }\n    },\n    /**\n     * Apply an UTF8 transformation if needed.\n     */\n    handleUTF8: function() {\n        if (this.useUTF8()) {\n            this.fileName = jszipProto.utf8decode(this.fileName);\n            this.fileComment = jszipProto.utf8decode(this.fileComment);\n        } else {\n            var upath = this.findExtraFieldUnicodePath();\n            if (upath !== null) {\n                this.fileName = upath;\n            }\n            var ucomment = this.findExtraFieldUnicodeComment();\n            if (ucomment !== null) {\n                this.fileComment = ucomment;\n            }\n        }\n    },\n\n    /**\n     * Find the unicode path declared in the extra field, if any.\n     * @return {String} the unicode path, null otherwise.\n     */\n    findExtraFieldUnicodePath: function() {\n        var upathField = this.extraFields[0x7075];\n        if (upathField) {\n            var extraReader = new StringReader(upathField.value);\n\n            // wrong version\n            if (extraReader.readInt(1) !== 1) {\n                return null;\n            }\n\n            // the crc of the filename changed, this field is out of date.\n            if (jszipProto.crc32(this.fileName) !== extraReader.readInt(4)) {\n                return null;\n            }\n\n            return jszipProto.utf8decode(extraReader.readString(upathField.length - 5));\n        }\n        return null;\n    },\n\n    /**\n     * Find the unicode comment declared in the extra field, if any.\n     * @return {String} the unicode comment, null otherwise.\n     */\n    findExtraFieldUnicodeComment: function() {\n        var ucommentField = this.extraFields[0x6375];\n        if (ucommentField) {\n            var extraReader = new StringReader(ucommentField.value);\n\n            // wrong version\n            if (extraReader.readInt(1) !== 1) {\n                return null;\n            }\n\n            // the crc of the comment changed, this field is out of date.\n            if (jszipProto.crc32(this.fileComment) !== extraReader.readInt(4)) {\n                return null;\n            }\n\n            return jszipProto.utf8decode(extraReader.readString(ucommentField.length - 5));\n        }\n        return null;\n    }\n};\nmodule.exports = ZipEntry;\n"]}